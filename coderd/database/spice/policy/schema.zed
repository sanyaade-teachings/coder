// Read this blog post before looking at this data
// https://authzed.com/blog/check-it-out
//
// Glossary: https://authzed.com/docs/reference/glossary
// Zanzibar Term Mapping: https://authzed.com/docs/reference/glossary#mapping-terminology-from-the-zanzibar-paper

definition user {
}

// group is a collection of users and operates exactly like a user from
// a permissions pov.
definition group {
	// A member of a group can be:
	// - A user
	// - Another group (nesting)
	// - 'user:*' is a wildcard that matches all users. For the Everyone group.
	relation member: user | group#member | user:*

	// membership is a synthetic permission that traverses the member relation
	// of any nested groups.
	permission membership = member
}

// platform is the site-wide level on the Coder product.
definition platform {
	// administrator is the "first user" assigned role that we call "owner".
	// Avoid calling this relation an "owner" though as we use that term for ownership
	// of specific resources.
	relation administrator: user

	// platform roles should only be used to escalate permissions above the "member" level.
	// All platform members are just "user". So add these with caution.
	permission super_admin = administrator
}

// TODO: Organization member
definition organization {
	// platform relation is the site level (site owner). All super-admin type permissions
	// are passed through the organization level.
	relation platform: platform

	// member role is the most primitive role in an organization. It grants 0 permissions, and just builds the
	// relatonship to the organization. This should be assigned for every user who is an organization member.
	// TODO: Can we enforce this as a required relation if they have another?
	//		 Something like (group#membership | user) & member
	relation member: group#membership | user

	/*******************
	 * Workspace Roles *
	 *******************/
	// workspace_viewers can always view all workspace properties for all
	// workspaces owned by an organization.
	relation workspace_viewer: group#membership | user
	// workspace_creator enables the granted to create workspace resources for
	// the given organization.
	relation workspace_creator: group#membership | user
	// workspace_deletor allows the delete permission to all organization workspaces.
	relation workspace_deletor: group#membership | user
	// workspace_editor allows editing a workspace's settings, build parameters, schedule,
	// etc.
	relation workspace_editor: group#membership | user
	// Other ideas:
	// - workspace_version_selector :: Template admins to update workspaces
	// - dangerous_workspace_connector :: SSH access to all workspaces

	/*******************
	 * Template Roles *
	 *******************/
	relation template_viewer: group#membership | user
	relation template_creator: group#membership | user
	relation template_deletor: group#membership | user
	relation template_editor: group#membership | user
	relation template_permission_manager: group#membership | user
	relation template_insights_viewer: group#membership | user

	/***************
	 * Other Roles *
	 ***************/

	/*******************
	 * Org Permissions *
	 *******************/
	// All the ways you can be a member of an organization.
	permission memership = member + 
		workspace_viewer + workspace_creator + workspace_deletor + workspace_editor +
		template_viewer + template_creator + template_deletor + template_editor + template_permission_manager + template_insights_viewer


	/*************************
	 * Workspace Permissions *
	 *************************/
	// view all workspaces owned by the team
	permission view_workspaces = platform->super_admin + workspace_viewer
	permission edit_workspaces = platform->super_admin + workspace_editor
	permission select_workspace_version = platform->super_admin
	permission delete_workspaces = platform->super_admin + workspace_deletor
	// create_workspace is on the organization level object. A workspace that is created is owned by the organization
	// and the application should setup the correct permissions/relations for the new resource.
	permission create_workspace = platform->super_admin + workspace_creator


	/************************
	 * Template Permissions *
	 ************************/
	permission view_templates = platform->super_admin + template_viewer
	permission view_template_insights = platform->super_admin + template_insights_viewer
	permission edit_templates = platform->super_admin + template_editor
	permission delete_templates = platform->super_admin + template_deletor
	permission manage_template_permissions = platform->super_admin + template_permission_manager
	// Creating a template, version, and file are all the same permissions
	permission create_template = platform->super_admin + template_creator
	permission create_template_version = create_template
	permission create_file = create_template
}


// Resources

// workspace's are owned and controlled by an organization. Users must be granted permission to interact
// with the team operated workspace. Most workspaces will only have 1 user with granted permissions.
// This mean from the policy's perspective, a user does not own their own workspaces.
definition workspace {
	// owning organization for pulling permissions through.
	relation organization: organization
	// Individually granted permissions
	relation viewer: group#membership | user
	relation editor: group#membership | user
	relation deletor: group#membership | user
	relation selector: group#membership | user
	relation connector: group#membership | user

	// for_user is a quick way to assign the permissions associated with "owning" 
	// a workspace as a user. Assign this instead of the individual permissions, as it enables
	// easier dynamic rewrites of the permissions later.
	relation for_user: group#membership | user


	// workspace_owner is a shortcut for the user who owns the workspace and is a member of the organization.
	permission workspace_owner = (for_user & organization->membership)

	// The permissions come from the owning organization roles, or individually granted
	// permissions. The individual grants must still be apart of the organization.
	permission view =
		// Some perms require view as well
		edit + delete + select_template_version + ssh +
		// Give view permissons to any role that requires reading the workspace to conduct their actions.
		organization->view_workspaces + viewer + 
		workspace_owner
	permission edit = organization->edit_workspaces + editor + workspace_owner
	permission delete = organization->delete_workspaces + deletor + workspace_owner
	// TODO: Maybe a caveat to check if the selected version is the active template version, and if that is allowed.
	permission select_template_version = organization->select_workspace_version + selector + workspace_owner
	permission ssh = connector + workspace_owner
}

definition workspace_build {
	// The build should always be related to a workspace
	relation workspace: workspace
	// relation template_version:
	// relation provisioner_job:

	// Can view if the workspace->view perm exists
	permission view = workspace->view
}

definition workspace_agent {
	relation workspace: workspace

	permission view = workspace->view
}

definition workspace_resources {
	relation workspace: workspace

	permission view = workspace->view
}


// Templates

definition template {
	// owning organization for pulling permissions through.
	relation organization: organization
	// workspace relates a given workspace to a template. This allows
	// 'view' permission to be granted through the workspace, so a person who can
	// view a workspce, can also view the template it is using.
	// TODO: Add deleted caveat?
	relation workspace: workspace

	permission view = organization->template_viewer + workspace->view
	permission view_insights = organization->view_template_insights
	// Edit allows adding and promoting template versions.
	permission edit = organization->edit_templates
	permission delete = organization->delete_templates
	permission edit_pemissions = organization->manage_template_permissions

	// Use is permitted by the owning organization.
	permission use = organization

	// Synthetic view
	permission workspace_view = workspace->view
}

definition template_version {
	relation template: template

	permission view = template->view
}

definition file {
	relation template_version: template_version

	permission view = template_version -> view
}

// Provisioners


definition job {
	relation template_version: template_version
	relation workspace_build: workspace_build
	// dry runs?

	permission view = template_version->view + workspace_build->view
}

